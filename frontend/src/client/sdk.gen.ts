// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-axios';
import type { StartConversationV1NewPostData, StartConversationV1NewPostResponse, StartConversationV1NewPostError, GetConversationsV1ConversationsGetData, GetConversationsV1ConversationsGetResponse, GetConversationsV1ConversationsGetError, ContinueConversationV1ConversationsPostData, ContinueConversationV1ConversationsPostResponse, ContinueConversationV1ConversationsPostError, StartConversationTestNewPostData, StartConversationTestNewPostResponse, StartConversationTestNewPostError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Start Conversation
 * Start a new conversation with the AI.
 *
 * Args:
 * query (MessageCreate): The message to send to the AI.
 * user_id (UUID): The ID of the user.
 * db (Session): The SQLModel session.
 * langchain_service (LangchainService): The Langchain service instance.
 *
 * Returns:
 * ConversationPublic: The created conversation object.
 */
export const startConversationV1NewPost = <ThrowOnError extends boolean = false>(options: Options<StartConversationV1NewPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<StartConversationV1NewPostResponse, StartConversationV1NewPostError, ThrowOnError>({
        url: '/v1/new',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Conversations
 * Get all conversations for a user by user ID.
 *
 * Args:
 * user_id (UUID): The ID of the user.
 * db (Session): The SQLModel session.
 *
 * Returns:
 * List[ConversationPublic]: A list of conversations for the user.
 */
export const getConversationsV1ConversationsGet = <ThrowOnError extends boolean = false>(options: Options<GetConversationsV1ConversationsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetConversationsV1ConversationsGetResponse, GetConversationsV1ConversationsGetError, ThrowOnError>({
        url: '/v1/conversations',
        ...options
    });
};

/**
 * Continue Conversation
 * Continue an existing conversation by conversation ID.
 *
 * Args:
 * query (MessageCreate): The message to send to the AI.
 * conversation_id (UUID): The ID of the conversation.
 * db (Session): The SQLModel session.
 * langchain_service (LangchainService): The Langchain service instance.
 *
 * Returns:
 * ConversationPublic: The updated conversation object.
 */
export const continueConversationV1ConversationsPost = <ThrowOnError extends boolean = false>(options: Options<ContinueConversationV1ConversationsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ContinueConversationV1ConversationsPostResponse, ContinueConversationV1ConversationsPostError, ThrowOnError>({
        url: '/v1/conversations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Start Conversation
 * Test Starting a new conversation with the AI with a predefined user.
 * Used at the moment for making the front-end functional
 * Will be replaced once authenthication is implemented
 *
 * Args:
 * query (MessageCreate): The message to send to the AI.
 * db (Session): The SQLModel session.
 * langchain_service (LangchainService): The Langchain service instance.
 *
 * Returns:
 * ConversationPublic: The created conversation object.
 */
export const startConversationTestNewPost = <ThrowOnError extends boolean = false>(options: Options<StartConversationTestNewPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<StartConversationTestNewPostResponse, StartConversationTestNewPostError, ThrowOnError>({
        url: '/test/new',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};
